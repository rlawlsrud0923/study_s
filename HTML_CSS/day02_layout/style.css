@charset "utf-8";

/* 초기화 */
* {margin:0; padding:0;}

/* cintents*/
#float-wrapper {
   background-color: green;
   padding: 20px;
   position: relative; /* 자기가 가지고 있는 자식 중에서 absolute의 기준점이 된다. */
}
.wrapper {
   width: 890px;
   margin: 0 auto;
/*   height: 800px; /* 고정적인 h값을 주면 하위 box가 추가될 경우 h값을 계속 수정해줘야 되기 때문에 좋지 않은 방법이다. */
}
h1 {
  color: #fff;
	text-align: center;
	padding: 50px;
	font-family: 'helvetica';
}
.box {
   width:200px; height:200px;
   margin:10px;
   background-color:#99ff99;
   border:1px solid #000;

   float: left; /* 박스들이 나란히 배열됨, 부모영역 찾아줘야 됨 */
   /*
		float 해제 방법
		1. 부모에게 높이를 준다.
		2. 고정적인 높이를 주지 못할 경우 : 부모에게 overflow : auto/hidden 준다.
		3. 하위의 요소를 제자리로 위치시키려면 clear: both 해주기

		1,2,3 내용을 모두 해결해주는 .clearfix:after 를 사용할 수 있다.
		.clearfix:after 는 영역을 잃어버린 부모에게 부여한다.

   */
}
.clearfix:after{
	content: "";
	display: block;
	clear: both;
	overflow: auto;
}

.innerbox {
   width: 180px; height: 50px;
   background-color: magenta;
   text-align: center;
   line-height:50px;
   color:#fff;
   font-size:2em;
   font-weight:bold;
   font-family:'helvetica';
}
.innerbox:before{
	content: ":"; /*text앞에 콜론*/
	/*display: block; /* block으로 바꿔주면 줄바꿈된다. 따라서, before와 after는 inline요소이다 */
}
.innerbox:after{
	content: "pink"; /*text뒤에 pink*/
	font-size: 0.5em;
}



/* position */
.box2{
	position: relative; /* 상대좌표 / top:0, left:0 이 자신의 위치 */
	top: 100px;
	left: 100px;
	z-index: 98;
}
.box3{
	position: absolute; /*  절대좌표 / 기준점이 없으면 body를 기준으로 이동한다 / body의 (0,0)을 기0준으로 이동
                          부모가 relative를 가지고 있으면 부모를 기준점으로 삼는다. */
	top: 0;
	left: 0;
	z-index: 99;
}
.boxFixed{
	position: fixed; /* 화면에 고정 */
	top: 0;
	left: 0;
	width: 100%;
	height: 150px;
	z-index: 100; /* z-index 값이 클수록 위 */
}
